{"version":3,"sources":["components/table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","history","createBrowserHistory","pushHistory","urlParams","URLSearchParams","window","location","search","state","config_url","get","set","push","concat","toString","handleSubmit","e","preventDefault","length","setState","loading","fetch","then","r","ok","Error","status","statusText","json","d","projects","catch","err_str","TypeError","console","error","finally","triggerLink","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","row","column","result","wrap","_context","prev","next","toConsumableArray","getLinkStatus","sent","updateText","text","compareResults","staging","production","stop","_x","_x2","apply","arguments","triggerRowLinks","_ref2","_callee2","_ref3","_ref4","stg_result","prd_result","_context2","Promise","all","slicedToArray","_x3","b","renderLink","cellInfo","cell","index","id","react_default","createElement","onClick","href","url","rel","target","value","has","data","default_config_url","body","branch","version","_this2","className","onSubmit","method","onChange","event","name","type","es","defaultFilterMethod","filter","pivotId","undefined","String","toUpperCase","indexOf","getTrProps","rowInfo","original","columns","Header","accessor","width","Cell","filterable","showPagination","onFetchData","instance","React","Component","App","components_table","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5f9fadd.chunk.js","sourcesContent":["import React from 'react';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport './table.css';\n\nimport { createBrowserHistory } from 'history';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    const urlParams = new URLSearchParams(window.location.search);\n    const default_config_url = 'https://demo5025930.mockable.io/snippet';\n    let config_url = default_config_url;\n    if (urlParams.has('config')) {\n        config_url = urlParams.get('config')\n    }\n    // console.log(urlParams.get('config'), config_url)\n    this.state = { data: [], projects: [], config_url, loading: false, default_config_url };\n  }\n\n  history = createBrowserHistory();\n\n  pushHistory = () =>{\n    const urlParams = new URLSearchParams(window.location.search);\n    if (this.state.config_url === urlParams.get('config')) {\n      return;\n    }\n    urlParams.set('config', this.state.config_url);\n    this.history.push(`?${urlParams.toString()}`);\n    // console.log(urlParams.toString());\n  }\n\n  handleSubmit = (e) => {\n    e && e.preventDefault();\n\n    if (!this.state.config_url.length) {\n      return;\n    }\n\n    this.pushHistory();\n\n    this.setState({loading: true});\n\n    fetch(this.state.config_url)\n    .then((r) => {\n        if (!r.ok) {\n            throw Error(`${r.status} - ${r.statusText}`);\n        }\n        return r.json();\n    })\n    .then((d) => {\n        // console.log(d['projects']);\n        this.setState({\n          projects: d['projects']\n        });\n        // console.log(this.state.projects);\n    })\n    .catch((e) => {\n        let err_str = e.toString()\n        if (e instanceof TypeError) {\n          err_str = \"Cors Disabled\";\n        }\n        console.error(\"Nonon\", err_str, e);\n        this.setState({projects: []})\n    })\n    .finally(() => {\n        this.setState({loading: false});\n    });\n  }\n\n  triggerLink = async (row, column) => {\n    let projects = [...this.state.projects];\n\n    const result = await this.getLinkStatus(row, column);\n\n    projects = this.updateText(row, column, result.text, projects);\n    projects[row].result = result.error ? 0 : this.compareResults(projects[row].staging, projects[row].production);\n    this.setState({ projects });\n  }\n\n  triggerRowLinks = async (row) => {\n    let projects = [...this.state.projects];\n\n    const [stg_result, prd_result] = await Promise.all([\n      this.getLinkStatus(row, 'staging'),\n      this.getLinkStatus(row, 'production'),\n    ]);\n\n    // console.log(stg_result, prd_result)\n    projects = this.updateText(row, 'staging', stg_result.text, projects);\n    projects = this.updateText(row, 'production', prd_result.text, projects);\n    projects[row].result = (stg_result.error || prd_result.error) ? 0 : this.compareResults(stg_result, prd_result);\n    // console.log(stg_result, prd_result, projects[row]['status']);\n    this.setState({ projects });\n  }\n\n  updateText = (row, column, text, projects) => {\n    projects[row][column]['text'] = text;\n    return projects;\n  }\n\n  compareResults = (a, b) => {\n    if (a.text === b.text) {\n      return 2;\n    }\n    return 1;\n  }\n\n  renderLink = (cellInfo) => {\n    const cell = this.state.projects[cellInfo.index][cellInfo.column.id];\n    return (\n      <a\n        onClick={(e) => {\n          e.preventDefault();\n          this.triggerLink(cellInfo.index, cellInfo.column.id)\n        }}\n        href={ cell.url }\n        rel=\"noopener noreferrer\"\n        target=\"_blank\">\n        { cellInfo.value }\n      </a>\n    )\n  }\n\n  getLinkStatus(row, column) {\n    const projects = [...this.state.projects];\n    const cell = projects[row][column];\n    cell.text = 'Loading...';\n\n    this.setState({ projects });\n\n    return fetch(cell.url)\n    .then((r) => {\n      if (!r.ok) {\n          throw Error(`${r.status} - ${r.statusText}`);\n      }\n      return r.json();\n    })\n    .then((body) => {\n      return {\n        text: body.branch || body.version || body.status,\n        error: false\n      };\n    })\n    .catch((e) => {\n        let err_str = e.toString()\n\n        if (e instanceof TypeError) {\n            err_str = \"Cors Disabled\";\n        }\n\n        return {\n          text: err_str,\n          error: true\n        };\n    });\n  }\n\n  render() {\n    return (\n        <div>\n          <div>\n            <div className=\"spliced\">\n              <form onSubmit={this.handleSubmit} method=\"GET\">\n                <label rel=\"config\">Configuration url:</label>\n                <input\n                  onChange={(event) => this.setState({config_url: event.target.value})}\n                  id=\"config-url\"\n                  name=\"config\"\n                  value={this.state.config_url}\n                />\n                <button type=\"submit\">\n                  Load\n                </button>\n              </form>\n            </div>\n            <div className=\"spliced\">\n            <label rel=\"config\">Example:</label>\n            <a href={this.state.default_config_url} rel=\"noopener noreferrer\" target=\"_blank\">{this.state.default_config_url}</a>\n            </div>\n          </div>\n      <ReactTable\n        data={this.state.projects}\n        loading={this.state.loading}\n        defaultFilterMethod={(filter, row, column) => {\n          const id = filter.pivotId || filter.id\n          return row[id] !== undefined ? String(row[id]).toUpperCase().indexOf(filter.value.toUpperCase()) > -1 : true\n        }}\n        getTrProps={(state, rowInfo, column) => {\n          let className = '';\n          if (rowInfo && rowInfo.original && rowInfo.original.result !== undefined) {\n            switch(rowInfo.original.result) {\n              case 0:\n                  className = 'row-offline';\n                  break;\n                case 1:\n                    className = 'row-differ';\n                    break;\n                case 2:\n                    className = 'row-online';\n                    break;\n                default:\n            }\n          }\n          return { className };\n        }}\n        // resolveData={data => data.map(row => row)}\n        columns={[\n          {\n            Header: 'Name',\n            accessor: 'name',\n            width: 150,\n          }, {\n            // Header: () => <button>Call</button>,\n            width: 50,\n            Cell: cellInfo => {\n              return (\n                <button onClick={() => {\n                  this.triggerRowLinks(cellInfo.index);\n                }}>\n                  call\n                </button>\n              )\n            }\n          }, {\n            Header: 'Result',\n            accessor: 'result',\n            width: 66,\n          }, {\n            id: 'staging',\n            Header: 'Staging',\n            accessor: d => (d.staging.text || d.staging.url),\n            Cell: this.renderLink\n          }, {\n            id: 'production',\n            Header: 'Production',\n            accessor: d => (d.production.text || d.production.url),\n            Cell: this.renderLink\n\n          }\n        ]}\n        filterable={true}\n        showPagination={false}\n        onFetchData={(state, instance) => {\n            if (this.state.projects.length > 0) {\n                return\n            }\n            this.handleSubmit();\n          }}\n      />\n      </div>\n    );\n\n  }\n}\n\nexport default Table;\n","import React from 'react';\nimport Table from './components/table';\n\nfunction App() {\n  return <div>\n    <Table />\n  </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}